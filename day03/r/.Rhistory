j=j+1
cost[i,j]=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
}
}
# plot(y=final$mycost[211:231],x=final$myw2[211:231])
p <- plot_ly(z = ~cost,x=w1s,y=w2s) %>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)
%>%
layout(
scene = list(
# camera=list(
#   eye = list(x=1.87, y=0.88, z=-0.64)
# )
xaxis = list(title = "W1"),
yaxis = list(title = "W2"),
zaxis = list(title = "Cost")
)
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="cost_test")
chart_link
mtcars
mydf = data.frame(y=mtcars$mpg,x1=mtcars$hp,x2=mtcars$wt)
mleb=lm(data=mydf,y~x1+x2)$coef[1]
mlew1=lm(data=mydf,y~x1+x2)$coef[2]
mlew2=lm(data=mydf,y~x1+x2)$coef[3]
myw1=c()
myw2=c()
mycost=c()
# for(w1 in seq(mlew1-5,mlew1+5,.5)){
#   for(w2 in seq(mlew2-5,mlew2+5,.5)){
#     cost=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
#     myw1=c(myw1,w1)
#     myw2=c(myw2,w2)
#     mycost=c(mycost,cost)
#     print(paste0("W1: ",w1,", W2: ",w2,", cost: ",w2,cost))
#   }
# }
w1s=seq(mlew1-5,mlew1+5,.5)
w2s=seq(mlew2-5,mlew2+5,.5)
cost=matrix(,length(w1s),length(w2s))
i=0
for(w1 in w1s){
i=i+1
j=0
for(w2 in w2s){
j=j+1
cost[i,j]=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
}
}
# plot(y=final$mycost[211:231],x=final$myw2[211:231])
p <- plot_ly(z = ~cost,x=w1s,y=w2s) %>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
)
%>%
layout(
# camera=list(
#   eye = list(x=1.87, y=0.88, z=-0.64)
# )
xaxis = list(title = "W1"),
yaxis = list(title = "W2"),
zaxis = list(title = "Cost")
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="cost_test")
chart_link
mtcars
mydf = data.frame(y=mtcars$mpg,x1=mtcars$hp,x2=mtcars$wt)
mleb=lm(data=mydf,y~x1+x2)$coef[1]
mlew1=lm(data=mydf,y~x1+x2)$coef[2]
mlew2=lm(data=mydf,y~x1+x2)$coef[3]
myw1=c()
myw2=c()
mycost=c()
# for(w1 in seq(mlew1-5,mlew1+5,.5)){
#   for(w2 in seq(mlew2-5,mlew2+5,.5)){
#     cost=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
#     myw1=c(myw1,w1)
#     myw2=c(myw2,w2)
#     mycost=c(mycost,cost)
#     print(paste0("W1: ",w1,", W2: ",w2,", cost: ",w2,cost))
#   }
# }
w1s=seq(mlew1-5,mlew1+5,.5)
w2s=seq(mlew2-5,mlew2+5,.5)
cost=matrix(,length(w1s),length(w2s))
i=0
for(w1 in w1s){
i=i+1
j=0
for(w2 in w2s){
j=j+1
cost[i,j]=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
}
}
# plot(y=final$mycost[211:231],x=final$myw2[211:231])
p <- plot_ly(z = ~cost,x=w1s,y=w2s) %>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
) %>%
layout(
# camera=list(
#   eye = list(x=1.87, y=0.88, z=-0.64)
# )
xaxis = list(title = "W1"),
yaxis = list(title = "W2"),
zaxis = list(title = "Cost")
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="cost_test")
chart_link
mtcars
mydf = data.frame(y=mtcars$mpg,x1=mtcars$hp,x2=mtcars$wt)
mleb=lm(data=mydf,y~x1+x2)$coef[1]
mlew1=lm(data=mydf,y~x1+x2)$coef[2]
mlew2=lm(data=mydf,y~x1+x2)$coef[3]
myw1=c()
myw2=c()
mycost=c()
# for(w1 in seq(mlew1-5,mlew1+5,.5)){
#   for(w2 in seq(mlew2-5,mlew2+5,.5)){
#     cost=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
#     myw1=c(myw1,w1)
#     myw2=c(myw2,w2)
#     mycost=c(mycost,cost)
#     print(paste0("W1: ",w1,", W2: ",w2,", cost: ",w2,cost))
#   }
# }
w1s=seq(mlew1-5,mlew1+5,.5)
w2s=seq(mlew2-5,mlew2+5,.5)
cost=matrix(,length(w1s),length(w2s))
i=0
for(w1 in w1s){
i=i+1
j=0
for(w2 in w2s){
j=j+1
cost[i,j]=sum((mydf$y-(w1*mydf$x1+w2*mydf$x2 + mleb))^2)
}
}
# plot(y=final$mycost[211:231],x=final$myw2[211:231])
p <- plot_ly(z = ~cost,x=w1s,y=w2s) %>% add_surface(
contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
highlightcolor="#ff0000",
project=list(z=TRUE)
)
)
) %>%
layout(
# camera=list(
#   eye = list(x=1.87, y=0.88, z=-0.64)
# )
xaxis = list(title = "W1"),
yaxis = list(title = "W2")
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="cost_test")
chart_link
cost
w1s
w2s
test = c(3:5)
sum(test,is.char=F)
shiny::runApp('jgmgj')
install.packages("usethis")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("RPackages/gClinBiomarker", host="https://github.roche.com/api/v3")
install_github("RPackages/gClinBiomarker", host="https://github.roche.com/api/v3")
remove.packages(fansi)
remove.packages("fansi")
install_github("RPackages/gClinBiomarker", host="https://github.roche.com/api/v3")
load("O:\PDL1mab\go28915_oak\ngs\intermdata\rnaseq")
load("O:/PDL1mab/go28915_oak/ngs/intermdata/rnaseq")
load("O:/PDL1mab/go28915_oak/ngs/intermdata/rnaseq/rawCounts_by_patient_v5.RData")
assayData(es3)
phenoData(es3)
featureData(es3)
dim(es3)
D <- data.frame(
version = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
A = c("a", "a", "a", "b", "v", "b", "c", "c", "c"),
B = rnorm(9)
)
split(D,D$version)
class(split(D,D$version))
df = data.frame(
AVAL = c(178,365,397,80,74,48),
EVENT = c(0,0,0,1,1,1)
)
df = data.frame(
AVAL = c(178,365,397,80,74,48),
EVENT = c(0,0,0,1,1,1)
)
myfit=survfit(Surv(time = AVAL, event = EVENT) ~ 1, data=df,conf.type="plain")
library(survival)
library(survival)
df = data.frame(
AVAL = c(178,365,397,80,74,48),
EVENT = c(0,0,0,1,1,1)
)
myfit=survfit(Surv(time = AVAL, event = EVENT) ~ 1, data=df,conf.type="plain")
print(myfit)
print(quantile(myfit, quantiles = c(0.25, 0.5, 0.75))$quantile)
plot(myfit)
plot(myfit,ylab=seq(0,1,.1))
plot(myfit,xlab=seq(0,1,.1))
plot(myfit,y=seq(0,1,.1))
x <- c(1:100)
y <- seq(0.1,10,0.1)
plot(y~x^3)
plot(y~I(x^3))
?I
sum((190*(1-.25)),(186*(1-.3939394)), (179*(1-.2810457)),(187*(1-.2919255)))/
sum(190,186,179,187)
weighted.spec=
sum((190*(1-.25)),(186*(1-.3939394)), (179*(1-.2810457)),(187*(1-.2919255)))/
sum(190,186,179,187)
weighted.spec=
sum((190*(.7857143)),(186*(.7142857)), (179*(.7307692)),(187*(.7692308)))/
sum(190,186,179,187)
weighted.sens=
sum((190*(.7857143)),(186*(.7142857)), (179*(.7307692)),(187*(.7692308)))/
sum(190,186,179,187)
weighted.sens
weighted.spec=
sum((190*(1-.25)),(186*(1-.3939394)), (179*(1-.2810457)),(187*(1-.2919255)))/
sum(190,186,179,187)
weighted.spec
joes.weighted.spec = 0.6975
weighted.sens=
sum((190*(.7857143)),(186*(.7142857)), (179*(.7307692)),(187*(.7692308)))/
sum(190,186,179,187)
weighted.sens
x <- y <- 5
x
y
x = y = 5
x
y
x = y <- 5
x
y
x <- y = 5
qnorm()
8+9+10+12+15+13
qgamma(p, 6, 93.5, lower.tail = TRUE,
log.p = FALSE)
qgamma(1/10, 6, 93.5, lower.tail = TRUE,
log.p = FALSE)
1-qgamma(1/10, 6, 93.5, lower.tail = TRUE,
log.p = FALSE)
16+8+114+60+4+23+30+105
pgamma(q=1/10, shape=6, rate=93.5)
16+8+114+60+4+23+30+105
setwd("C:/Users/harric17/Desktop/advent_of_code/advent_of_code_2015/day03/r")
library(dplyr)
library(stringr)
library(ggplot2)
library(gganimate)
library(gifski)
input = read.csv("../input.txt",header=FALSE,stringsAsFactors = FALSE)
myvec=c()#I did this so I could write out a csv that could be imported by scratch
for(i in 1:nchar(input)){
#print(substr(input,i,i))
myvec = c(myvec,substr(input,i,i))
}
position=allpositions=data.frame(x=0,y=0)
cnt=0
for(i in myvec){
#print(i)
# png(filename=paste0("plots/",str_pad(cnt, 5, pad = "0"),".png"))
# plot(allpositions,type="S",pch = 20,cex=.01)
# points(x=0,y=0,col="darkgreen",pch=19)
# points(tail(allpositions,1),col="red",pch=19)
# dev.off()
if(i=="^"){position[["y"]]=position[["y"]]+1}
else if(i==">"){position[["x"]]=position[["x"]]+1}
else if(i=="v"){position[["y"]]=position[["y"]]-1}
else if(i=="<"){position[["x"]]=position[["x"]]-1}
allpositions=rbind(allpositions,position)
cnt=cnt+1
}
plot(allpositions,type="S",pch = 20,cex=.01)
points(x=0,y=0,col="darkgreen",pch=19)
points(tail(allpositions,1),col="red",pch=19)
nrow(distinct(allpositions)) #part 1 solution
allpositions = allpositions %>% mutate(order=row_number())
theorigin=allpositions[1,]
p=ggplot(data=allpositions,
aes(x=x, y=y)) +
geom_point(color="red",size=5) +
transition_time(order) +
geom_line() +
transition_reveal(along = order)
p=p+geom_point(aes(x = x, y = y), theorigin, size=5,color = "green")
out=animate(p,nframes=nrow(allpositions)+10,fps=100,end_pause = 10,renderer=gifski_renderer("test1.gif"))
plot(allpositions,type="S",pch = 20,cex=.01)
plot(allpositions,pch = 20,cex=.01)
plot(allpositions,pch = 20,cex=.01)
rm(list=ls())
input = read.csv("../input.txt",header=FALSE,stringsAsFactors = FALSE)
myvec=c()#I originally did this so I could write out a csv that could be imported by scratch
for(i in 1:nchar(input)){
#print(substr(input,i,i))
myvec = c(myvec,substr(input,i,i))
}
position=allpositions=data.frame(x=0,y=0)
cnt=0
for(i in myvec){
#print(i)
if(i=="^"){position[["y"]]=position[["y"]]+1}
else if(i==">"){position[["x"]]=position[["x"]]+1}
else if(i=="v"){position[["y"]]=position[["y"]]-1}
else if(i=="<"){position[["x"]]=position[["x"]]-1}
allpositions=rbind(allpositions,position)
cnt=cnt+1
}
plot(x=allpositions[["x"]],allpositions[["y"]],pch = 20,cex=.01)
points(x=0,y=0,col="darkgreen",pch=19)
plot(x=allpositions[["x"]],allpositions[["y"]],type="S",pch = 20,cex=.01)
points(x=0,y=0,col="darkgreen",pch=19)
points(tail(allpositions,1),col="red",pch=19)
plot(x=allpositions[["x"]],allpositions[["y"]],type="S",pch = 20,cex=.01)
points(x=0,y=0,col="darkgreen",pch=19,cex=1.5)
points(tail(allpositions,1),col="red",pch=19)
plot(x=allpositions[["x"]],allpositions[["y"]],type="S",pch = 20,cex=.01)
points(x=0,y=0,col="darkgreen",pch=19,cex=1.5)
points(tail(allpositions,1),col="red",pch=19,cex=1.5)
#Lets plot the path
png(filename="path.png")
plot(x=allpositions[["x"]],allpositions[["y"]],type="S",pch = 20,cex=.01)
points(x=0,y=0,col="darkgreen",pch=19,cex=1.5)
points(tail(allpositions,1),col="red",pch=19,cex=1.5)
dev.off()
#Lets plot the path
png(filename="path.png")
plot(x=allpositions[["x"]],allpositions[["y"]],type="S",pch = 20,cex=.01)
points(x=0,y=0,col="green",pch=19,cex=1.5)
points(tail(allpositions,1),col="red",pch=19,cex=1.5)
dev.off()
#Lets plot the path
png(filename="path.png")
plot(x=allpositions,type="S",pch = 20,cex=.01)
points(x=0,y=0,col="green",pch=19,cex=1.5)
points(tail(allpositions,1),col="red",pch=19,cex=1.5)
dev.off()
10 %2
10 % 2
10 %% 2
11 %% 2
12 %% 2
cnt=1
cnt %% 2==1
library(dplyr)
library(stringr)
library(ggplot2)
library(gganimate)
library(gifski)
rm(list=ls())
input = read.csv("../input.txt",header=FALSE,stringsAsFactors = FALSE)
myvec=c()#I originally did this so I could write out a csv that could be imported by scratch
for(i in 1:nchar(input)){
#print(substr(input,i,i))
myvec = c(myvec,substr(input,i,i))
}
santaposition=roboposition=allpositions=data.frame(x=0,y=0)
cnt=1
for(i in myvec){
#print(i)
if(cnt %% 2==1){#odd
if(i=="^"){santaposition[["y"]]=santaposition[["y"]]+1}
else if(i==">"){santaposition[["x"]]=santaposition[["x"]]+1}
else if(i=="v"){santaposition[["y"]]=santaposition[["y"]]-1}
else if(i=="<"){santaposition[["x"]]=santaposition[["x"]]-1}
santaposition$order=cnt
}else{
if(i=="^"){roboposition[["y"]]=roboposition[["y"]]+1}
else if(i==">"){roboposition[["x"]]=roboposition[["x"]]+1}
else if(i=="v"){roboposition[["y"]]=roboposition[["y"]]-1}
else if(i=="<"){roboposition[["x"]]=roboposition[["x"]]-1}
roboposition$order=cnt
}
allpositions=rbind(allpositions,santaposition,roboposition)
cnt=cnt+1
}
library(dplyr)
library(stringr)
library(ggplot2)
library(gganimate)
library(gifski)
rm(list=ls())
input = read.csv("../input.txt",header=FALSE,stringsAsFactors = FALSE)
myvec=c()#I originally did this so I could write out a csv that could be imported by scratch
for(i in 1:nchar(input)){
#print(substr(input,i,i))
myvec = c(myvec,substr(input,i,i))
}
santaposition=roboposition=allpositions=data.frame(x=0,y=0,order=0)
cnt=1
for(i in myvec){
#print(i)
if(cnt %% 2==1){#odd
if(i=="^"){santaposition[["y"]]=santaposition[["y"]]+1}
else if(i==">"){santaposition[["x"]]=santaposition[["x"]]+1}
else if(i=="v"){santaposition[["y"]]=santaposition[["y"]]-1}
else if(i=="<"){santaposition[["x"]]=santaposition[["x"]]-1}
santaposition$order=cnt
}else{
if(i=="^"){roboposition[["y"]]=roboposition[["y"]]+1}
else if(i==">"){roboposition[["x"]]=roboposition[["x"]]+1}
else if(i=="v"){roboposition[["y"]]=roboposition[["y"]]-1}
else if(i=="<"){roboposition[["x"]]=roboposition[["x"]]-1}
roboposition$order=cnt
}
allpositions=rbind(allpositions,santaposition,roboposition)
cnt=cnt+1
}
allpositions %>% select(-order) %>% distinct() %>% nrow() #part 2 solution
plot(x=allpositions,type="S",pch = 20,cex=.01)
points(x=0,y=0,col="green",pch=19,cex=1.5)
points(tail(allpositions,1),col="red",pch=19,cex=1.5)
View(allpositions)
library(dplyr)
library(stringr)
library(ggplot2)
library(gganimate)
library(gifski)
rm(list=ls())
input = read.csv("../input.txt",header=FALSE,stringsAsFactors = FALSE)
myvec=c()#I originally did this so I could write out a csv that could be imported by scratch
for(i in 1:nchar(input)){
#print(substr(input,i,i))
myvec = c(myvec,substr(input,i,i))
}
santaposition=data.frame(who="SANTA",x=0,y=0,order=0)
roboposition=data.frame(who="ROBOT",x=0,y=0,order=0)
allpositions=rbind(santaposition,roboposition)
cnt=1
for(i in myvec){
#print(i)
if(cnt %% 2==1){#odd
if(i=="^"){santaposition[["y"]]=santaposition[["y"]]+1}
else if(i==">"){santaposition[["x"]]=santaposition[["x"]]+1}
else if(i=="v"){santaposition[["y"]]=santaposition[["y"]]-1}
else if(i=="<"){santaposition[["x"]]=santaposition[["x"]]-1}
santaposition$order=cnt
}else{
if(i=="^"){roboposition[["y"]]=roboposition[["y"]]+1}
else if(i==">"){roboposition[["x"]]=roboposition[["x"]]+1}
else if(i=="v"){roboposition[["y"]]=roboposition[["y"]]-1}
else if(i=="<"){roboposition[["x"]]=roboposition[["x"]]-1}
roboposition$order=cnt
}
allpositions=rbind(allpositions,santaposition,roboposition)
cnt=cnt+1
}
View(allpositions)
ggplot(data=allpositions %>% filter(who="SANTA"),
aes(x=x, y=y)) +
geom_point(color="red",size=5) +
geom_line()
ggplot(data=allpositions %>% filter(who=="SANTA"),
aes(x=x, y=y)) +
geom_point(color="red",size=5) +
geom_line()
ggplot(data=allpositions %>% filter(who=="SANTA"),
aes(x=x, y=y)) +
# geom_point(color="red",size=5) +
geom_line()
santa=allpositions %>% filter(who=="SANTA")
robot=allpositions %>% filter(who=="ROBOT")
robot
ggplot(data=santa,
aes(x=x, y=y))
ggplot(data=santa,
aes(x=x, y=y)) +
geom_point()
ggplot(data=santa,
aes(x=x, y=y)) +
geom_point() +
geom_line()
saveRDS(allpositions,"part2.rds")
